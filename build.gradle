import org.codehaus.groovy.jsr223.GroovyCompiledScript;

ext {
    jvm = org.gradle.internal.jvm.Jvm.current()
    javaVersion = JavaVersion.current()
    assert javaVersion.java7 : "Must use a Java 7 compatible JVM to perform this build. Current JVM is ${jvm}"

    groupVersionBindings = project.ext.properties.findAll{ it.key ==~ /^[\w]+(Group|Version)$/}

    groovyProjects = []
    protobufProjects =[]

    subprojects.each{ subproject ->
        def protobufFiles = subproject.projectDir.listFiles({f ->f ==~ /^.+\.proto$/ } as FileFilter).toList()
        if(protobufFiles.size()) {
            protobufProjects.push subproject
            subproject.ext.protobufFiles = protobufFiles
        }
        if(!subproject.childProjects.size() && !(subproject in protobufProjects))
            groovyProjects.push subproject
    }
}

allprojects {
    apply from: "$rootDir/gradle/naming.gradle"
    apply plugin: 'eclipse'
    eclipse.project.name = (project != rootProject) ? "ecurrencies.$artifactId" : artifactId
    repositories {
        mavenCentral()
        mavenRepo url: 'http://repository.springsource.com/maven/bundles/external'
        mavenRepo url: 'http://maven.springframework.org/milestone'
        mavenRepo url: 'http://maven.devsoftbr.com:8080/bundles/external'
    }
}

subprojects {
    version = rootProject.version

    if(project in groovyProjects){

        apply plugin: 'groovy'

        tasks.each { t ->
            if(t instanceof JavaCompile || t instanceof GroovyCompile) {
                t.options.compilerArgs = ['-Xlint:all', '-Werror']
            }
        }

        dependencies {
            groovy "$groovyGroup:groovy-all:$groovyVersion"
            testCompile "${hamcrestGroup}:hamcrest-library:${hamcrestVersion}"
            testCompile "${testngGroup}:testng:${testngVersion}"
        }

        test {
            enableAssertions = true
            jvmArgs '-Xms256m', '-Xmx512m'
            testLogging {
                minGranularity = 3
                showStandardStreams = true
                exceptionFormat 'full'
                events 'failed'
                info.events 'passed'
                debug.events 'started'
                stackTraceFilters 'groovy', 'entry_point', 'truncate'
            }
        }

        apply from: "$rootDir/gradle/dependencyPostProcessing.gradle"
    }

    if(project in protobufProjects) {
        apply plugin: 'java'
        apply from: "$rootDir/gradle/protobuf.gradle"
    }

    if(project in (groovyProjects + protobufProjects)) {

        apply from: "${rootProject.projectDir}/gradle/bundlor.gradle"

        sourceCompatibility = javaVersion
        targetCompatibility = javaVersion

        tasks.each { t ->
            if(t instanceof JavaCompile || t instanceof GroovyCompile)
                t.options.encoding = 'UTF-8'
            if(t instanceof GroovyCompile)
                t.groovyOptions.encoding = 'UTF-8'
        }

        jar {
            manifest.attributes << ['Implementation-Title':artifactId]
            manifest.attributes << ['Implementation-Version':version]

            from("$rootDir/src/dist") {
                include "license.txt"
                include "notice.txt"
                into "META-INF"
                expand(copyright: new Date().format('yyyy'), version: version)
            }
        }

        task sourcesJar(type: Jar, dependsOn:classes) {
            classifier = 'sources'
            from sourceSets.main.allJava
        }

        afterEvaluate {
            archivesBaseName = artifactId
        }
    }
}