
task bundlor(dependsOn: compileJava, group: 'build') {

    description = 'Generates an OSGi-compatibile MANIFEST.MF file.'

    def template = file("${projectDir}/template.mf")
    def inputPath = file("${project.buildDir}/classes")
    def bundlorDir = file("${project.buildDir}/bundlor")
    def manifestFile = file("${bundlorDir}/META-INF/MANIFEST.MF")
    def propertiesFile = new File(projectDir, 'bundlor.properties')

    enabled = template.isFile()

    // inform gradle what directory this task writes so that it can be
    // removed when issuing `gradle cleanBundlor`
    outputs.dir bundlorDir

    // incremental build configuration
    //   if the $manifest output file already exists, the bundlor
    //   task will be skipped *unless* any of the following are true
    //   * template.mf has been changed
    //   * main classpath dependencies have been changed
    //   * main java sources for this project have been modified
    outputs.files manifestFile
    inputs.files template, propertiesFile, project.sourceSets.main.runtimeClasspath

    if(enabled){

        project.ext {
            bundleVersion                      = project.version
            bundleName                         = "${project.artifactId} ${project.version}"
            bundleSymbolicName                 = project.artifactId
            bundleRequiredExecutionEnvironment = "JavaSE-${javaVersion}"
        }

        repositories { mavenRepo url: 'http://build.eclipse.org/rt/virgo/maven/bundles/release' }

        configurations{ bundlorconf }

        dependencies{
            bundlorconf "org.eclipse.virgo.bundlor:org.eclipse.virgo.bundlor:${bundlorVersion}",
                    "org.eclipse.virgo.bundlor:org.eclipse.virgo.bundlor.ant:${bundlorVersion}",
                    "org.eclipse.virgo.bundlor:org.eclipse.virgo.bundlor.blint:${bundlorVersion}"
        }

        // the bundlor manifest should be evaluated as part of the jar task's
        // incremental build and the jar task should use bundlor manifest instead
        // of the default
        project.jar {
            dependsOn bundlor
            inputs.files manifestFile
            manifest.from manifestFile
        }
    }

    doLast {
        ant.taskdef(resource: 'org/eclipse/virgo/bundlor/ant/antlib.xml',
                classpath: configurations.bundlorconf.asPath)

        // the bundlor ant task writes directly to standard out redirect it
        // to INFO level logging, which gradle will deal with gracefully
        logging.captureStandardOutput(LogLevel.INFO)

        if(!inputPath.isDirectory())
            inputPath.mkdir()

        // the ant task will throw an exception unless this dir exists
        if (!bundlorDir.isDirectory())
            bundlorDir.mkdir()

        // execute the ant task, and write out the $manifest file
        ant.bundlor(failOnWarnings: true,
                inputPath: inputPath,
                outputPath: bundlorDir,
                manifestTemplatePath: template,
                propertiesPath: propertiesFile.exists() ? propertiesFile.path : "") {
                    project.ext.properties.each {k,v ->
                        property(name: k, value: v)
                    }
                }
    }
}