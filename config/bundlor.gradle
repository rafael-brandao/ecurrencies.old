if(project in bundlorProjects){

    ext {
        bundleVersion                      = project.version
        bundleName                         = "${project.artifactId} ${project.version}"
        bundleSymbolicName                 = project.artifactId
        bundleRequiredExecutionEnvironment = "JavaSE-${javaVersion}"
    }

    task bundlor (dependsOn: compileJava, group: 'build') {

        description = 'Generates an OSGi-compatibile MANIFEST.MF file.'

        def template = new File(projectDir, 'template.mf')
        def bundlorDir = file("${project.buildDir}/bundlor")
        def manifest = file("${bundlorDir}/META-INF/MANIFEST.MF")
        def propertiesFile = new File(projectDir, 'bundlor.properties')

        // inform gradle what directory this task writes so that it can be
        // removed when issuing `gradle cleanBundlor`
        outputs.dir bundlorDir

        // incremental build configuration
        //   if the $manifest output file already exists, the bundlor
        //   task will be skipped *unless* any of the following are true
        //   * template.mf has been changed
        //   * main classpath dependencies have been changed
        //   * main java sources for this project have been modified
        outputs.files manifest
        inputs.files template,propertiesFile, project.sourceSets.main.runtimeClasspath

        repositories { maven { url 'http://build.eclipse.org/rt/virgo/maven/bundles/release' } }

        configurations{ bundlorconf }

        dependencies{
            bundlorconf "org.eclipse.virgo.bundlor:org.eclipse.virgo.bundlor:${bundlorVersion}",
                    "org.eclipse.virgo.bundlor:org.eclipse.virgo.bundlor.ant:${bundlorVersion}",
                    "org.eclipse.virgo.bundlor:org.eclipse.virgo.bundlor.blint:${bundlorVersion}"
        }

        // the bundlor manifest should be evaluated as part of the jar task's 
        // incremental build
        project.jar {
            dependsOn bundlor
            inputs.files manifest
        }
        // tell the jar task to use bundlor manifest instead of the default
        jar.inputs.files manifest

        project.jar.manifest.from manifest

        doLast {
            ant.taskdef(resource: 'org/eclipse/virgo/bundlor/ant/antlib.xml',
                    classpath: configurations.bundlorconf.asPath)

            // the bundlor ant task writes directly to standard out redirect it
            // to INFO level logging, which gradle will deal with gracefully
            logging.captureStandardOutput(LogLevel.INFO)

            // the ant task will throw unless this dir exists
            if (!bundlorDir.isDirectory())
                bundlorDir.mkdir()

            // execute the ant task, and write out the $manifest file
            ant.bundlor(failOnWarnings: true,
                    inputPath: sourceSets.main.output.classesDir,
                    outputPath: bundlorDir,
                    manifestTemplatePath: template,
                    propertiesPath: propertiesFile.exists() ? propertiesFile.path : "") {
                        project.ext.properties.each {k,v ->
                            property(name: k, value: v)
                        }
                    }
        }
    }
}

