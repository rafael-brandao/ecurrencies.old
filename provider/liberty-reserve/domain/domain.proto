package ecurrencies.libertyreserve.domain;

option java_package = "ecurrencies.libertyreserve.domain";
option java_multiple_files = true;
enum Currency {
    USD = 1;
    EURO = 2;
    GOLD = 3;
}

enum PaymentPurpose {
    SALARY = 1;
    SERVICE = 2;
}

enum TransactionDirection {
    INCOMING = 1;
    OUTGOING = 2;
}

enum TransactionPrivacy {
    ANY = 0;
    YES = 1;
    NO = 2;
}

enum TransactionSource {
    SITE = 1;
    WALLET = 2;
    API = 3;
    SCI = 4;
}

enum TransactionType {
    TRANSFER = 1;
}

message Api {
    required string name = 1;
    required string accountId = 2; // validation -> regex = (M|U|X)(\d)+
}

message RequestHeader {
    required string id = 1;
    required Api api = 2;
    required string token = 3;
}

message AccountNameRequest {
    message Payload {
        required string searchAccountId = 1; // validation -> regex = (M|U|X)(\d)+
    }

    required RequestHeader header = 1;
    required Payload payload = 2;
}

message BalanceRequest {
    message Payload {
        optional Currency currency = 1;
    }

    required RequestHeader header = 1;
    required Payload payload = 2;
}

message FindTransactionRequest {
    message Payload {
        required int64 batchNumber = 1; // validation -> batchNumber > 0
    }

    required RequestHeader header = 1;
    required Payload payload = 2;
}

// validation constraint 1 ->  till > from
// validation constraint 2 ->  amountFrom > amountTo
message HistorySpecification {
    optional int64 from = 1 ; // validation -> from >= 0
    required int64 till = 2 ; // validation -> till > 0
    optional Currency currency = 3;
    optional TransactionDirection transactionDirection = 4;
    optional string relatedAccountId = 5; // validation -> regex = \d+\.((\d{2,2}){1,2})
    optional string merchantReference = 6; // validation -> varchar(20)
    optional TransactionSource transactionSource = 7;
    optional TransactionPrivacy transactionPrivacy = 8;
    optional string amountFrom = 9; // validation -> regex = \d+\.((\d{2,2}){1,2})
    optional string amountTo = 10; // validation -> regex = \d+\.((\d{2,2}){1,2})
}

message HistoryRequest {
    message Payload {
        required HistorySpecification specification = 1;
        optional int32 pageIndex = 2 [default = 1]; // validation -> pageIndex > 0
        optional int32 pageSize = 3 [default = 20]; // validation -> 0 < pageSize <= 20
    }

    required RequestHeader header = 1;
    required Payload payload = 2;
}

message TransferRequest {
    message Payload {
        required string payeeAccountId = 1; // validation -> regex = (M|U|X)(\d)+
        required string amount = 2; // validation -> regex = \d+\.((\d{2,2}){1,2})
        required Currency currency = 3;
        optional string memo = 4 [default = ""]; // validation -> varchar(250)
        required string merchantReference = 5; // validation -> varchar(20)
        optional TransactionType type = 6 [default = TRANSFER];
        optional bool private = 7 [default = false];
        optional PaymentPurpose purpose = 8 [default = SERVICE];
    }

    required RequestHeader header = 1;
    required Payload payload = 2;
}

message Account {
    required string accountId = 1; // validation -> regex = (M|U|X)(\d)+
    required string accountName = 2;
}

message Balance {
    required Currency currency = 1;
    required string balance = 2; // validation -> regex = \d+\.((\d{2,2}){1,2})
}

message Transaction {
    required int64 batchNumber = 1; // validation -> batchNumber > 0
    required int64 date = 2; // validation -> date > 0
    required string merchantReference = 3;
    required TransactionType type = 4;
    required string payerAccountId = 5; // validation -> regex = (M|U|X)(\d)+
    required string payerAccountName = 6;
    required string payeeAccountId = 7; // validation -> regex = (M|U|X)(\d)+
    required string payeeAccountName = 8;
    required Currency currency = 9;
    required string amount = 10; // validation -> regex = \d+\.((\d{2,2}){1,2})
    required string fee = 11; // validation -> regex = \d+\.((\d{2,2}){1,2})
    required string closingBalance = 12; // validation -> regex = \d+\.((\d{2,2}){1,2})
    required string memo = 13; // validation -> varchar(250)
    required bool private = 14;
    required TransactionSource source = 15;
}

enum ResponseStatus {
    NONE = 0;
    SUCCESS = 1;
    ERROR = 2;
}

message Error {
    required int32 code = 1;
    optional string message = 2;
}

message ResponseHeader {
    optional string id = 1; // validation -> varchar(20)
    required int64 timestamp = 2; // validation -> timestamp > 0
    required ResponseStatus status = 3;
    optional Error error = 4;
}

message AccountNameResponse {
    message Payload {
        optional Account account = 1;
    }

    required ResponseHeader header = 1;
    required Payload payload = 2;
}

message BalanceResponse {
    message Payload {
        repeated Balance balances = 1;
    }

    required ResponseHeader header = 1;
    required Payload payload = 2;
}

message HistoryResponse {
    message Payload {
        optional bool hasMore = 1;
        repeated Transaction transactions = 2;
    }

    required ResponseHeader header = 1;
    required Payload payload = 2;
}

message TransactionResponse {
    message Payload {
        optional Transaction transaction = 1;
    }

    required ResponseHeader header = 1;
    required Payload payload = 2;
}